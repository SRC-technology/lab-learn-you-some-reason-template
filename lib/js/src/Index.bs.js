// Generated by BUCKLESCRIPT VERSION 5.0.3, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var ReactDOMRe = require("reason-react/lib/js/src/ReactDOMRe.js");

var Task = /* module */[];

var initial_state_001 = /* tasks : :: */[
  /* record */[
    /* id */Date.now().toString(),
    /* label */"Learn Reason",
    /* status : Pending */0
  ],
  /* [] */0
];

var initial_state = /* record */[
  /* input */undefined,
  initial_state_001
];

var State = /* module */[/* initial_state */initial_state];

function reducer(state, action) {
  var new_state;
  if (typeof action === "number") {
    var match = state[/* input */0];
    new_state = match !== undefined ? /* record */[
        /* input */undefined,
        /* tasks : :: */[
          /* record */[
            /* id */Date.now().toString(),
            /* label */match,
            /* status : Pending */0
          ],
          state[/* tasks */1]
        ]
      ] : state;
  } else if (action.tag) {
    var id = action[0];
    var new_tasks = List.map((function (task) {
            var match = id === task[/* id */0];
            if (match) {
              return /* record */[
                      /* id */task[/* id */0],
                      /* label */task[/* label */1],
                      /* status : Done */1
                    ];
            } else {
              return task;
            }
          }), state[/* tasks */1]);
    new_state = /* record */[
      /* input */state[/* input */0],
      /* tasks */new_tasks
    ];
  } else {
    var text = action[0];
    new_state = text === "" ? /* record */[
        /* input */undefined,
        /* tasks */state[/* tasks */1]
      ] : /* record */[
        /* input */text,
        /* tasks */state[/* tasks */1]
      ];
  }
  console.log(new_state);
  return new_state;
}

var App = /* module */[
  /* Task */Task,
  /* State */State,
  /* reducer */reducer
];

function Index$Component$Task(Props) {
  var task = Props.task;
  var onDone = Props.onDone;
  var match = task[/* status */2];
  return React.createElement("li", undefined, React.createElement("span", undefined, match ? "done" : "pending"), React.createElement("span", undefined, task[/* label */1]), React.createElement("button", {
                  onClick: (function (param) {
                      return Curry._1(onDone, task[/* id */0]);
                    })
                }, "done"));
}

var Task$1 = /* module */[/* make */Index$Component$Task];

function Index$Component$App(Props) {
  var initial_state = Props.initial_state;
  var match = React.useReducer(reducer, initial_state);
  var dispatch = match[1];
  var state = match[0];
  var match$1 = state[/* input */0];
  return React.createElement("div", undefined, React.createElement("input", {
                  value: match$1 !== undefined ? match$1 : "",
                  onChange: (function (e) {
                      var text = e.target.value;
                      return Curry._1(dispatch, /* Write */Block.__(0, [text]));
                    })
                }), React.createElement("button", {
                  onClick: (function (param) {
                      return Curry._1(dispatch, /* Add_task */0);
                    })
                }, "add"), React.createElement("ul", undefined, $$Array.of_list(List.map((function (task) {
                            return React.createElement(Index$Component$Task, {
                                        task: task,
                                        onDone: (function (task_id) {
                                            return Curry._1(dispatch, /* Complete_task */Block.__(1, [task_id]));
                                          }),
                                        key: task[/* id */0]
                                      });
                          }), state[/* tasks */1]))));
}

var App$1 = /* module */[/* make */Index$Component$App];

var Component = /* module */[
  /* Task */Task$1,
  /* App */App$1
];

ReactDOMRe.renderToElementWithId(React.createElement(Index$Component$App, {
          initial_state: initial_state
        }), "app");

exports.App = App;
exports.Component = Component;
exports.initial_state = initial_state;
/* initial_state Not a pure module */
